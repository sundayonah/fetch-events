
package main

import (
	"context"
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"math/big"
	"net/http"
	"os"
	"strings"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	_ "github.com/lib/pq" // Import the PostgreSQL driver
)

var db *sql.DB

// Struct to match the JSON structure of the contract artifact
type ContractArtifact struct {
	ABI json.RawMessage `json:"abi"`
}

type PoolCreatedEvent struct {
	StartBlock    *big.Int
	EndBlock      *big.Int
	LeverageLong  *big.Int
	LeverageShort *big.Int
	Raw           types.Log
}

type PriceUpdatedEvent struct {
	NewPrice    *big.Int
	UpdateBlock *big.Int `json:"updateBlock"`
}

type Deployment struct {
	Network          string `json:"network"`
	BondingCurve     string `json:"bondingCurve"`
	PriceOracle      string `json:"priceOracle"`
	GlpManager       string `json:"glpManager"`
	PredictionMarket string `json:"predictionMarket"`
}

func readFile(filePath string) ([]byte, error) {
	file, err := os.Open(filePath)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	byteValue, err := ioutil.ReadAll(file)
	if err != nil {
		return nil, err
	}

	return byteValue, nil
}

// func loadDeployment(deploymentPath string) (*Deployment, error) {
// 	byteValue, err := readFile(deploymentPath)
// 	if err != nil {
// 		return nil, err
// 	}

// 	var deployment Deployment
// 	if err := json.Unmarshal(byteValue, &deployment); err != nil {
// 		return nil, err
// 	}

// 	return &deployment, nil
// }

func loadABI(abiPath string) (*abi.ABI, error) {
	byteValue, err := readFile(abiPath)
	if err != nil {
		return nil, err
	}

	// var artifact ContractArtifact
	// if err := json.Unmarshal(byteValue, &artifact); err != nil {
	// 	return nil, err
	// }

	var parsedABI abi.ABI
	if err := json.Unmarshal(byteValue, &parsedABI); err != nil {
		return nil, err
	}

	return &parsedABI, nil
}

// Initialize the database connection
func initDB() {
	var err error
	db, err = sql.Open("postgres", "postgres://postgres:Encoded.001@localhost:5432/postgres?sslmode=disable")
	if err != nil {
		log.Fatalf("Failed to connect to the PostgreSQL database: %v", err)
	}
}

// Pool struct for JSON response
type Pool struct {
	PoolID        string `json:"poolId"`
	StartBlock    int    `json:"startBlock"`
	EndBlock      int    `json:"endBlock"`
	LeverageLong  int    `json:"leverageLong"`
	LeverageShort int    `json:"leverageShort"`
}

// Price struct for JSON response
type Price struct {
	Price string `json:"price"`
}

// getPools handles the /api/pools endpoint
func getPools(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT poolId, startBlock, endBlock, leverageLong, leverageShort FROM pools")
	if err != nil {
		http.Error(w, "Failed to query database", http.StatusInternalServerError)
		log.Println("Error querying database:", err)
		return
	}
	defer rows.Close()

	fmt.Print(rows)

	var pools []Pool
	for rows.Next() {
		var pool Pool
		if err := rows.Scan(&pool.PoolID, &pool.StartBlock, &pool.EndBlock, &pool.LeverageLong, &pool.LeverageShort); err != nil {
			http.Error(w, "Failed to read database result", http.StatusInternalServerError)
			log.Println("Error reading result:", err)
			return
		}
		pools = append(pools, pool)
	}

	fmt.Print(pools)

	if err := rows.Err(); err != nil {
		http.Error(w, "Error occurred during iteration", http.StatusInternalServerError)
		log.Println("Row iteration error:", err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(pools); err != nil {
		http.Error(w, "Failed to encode JSON", http.StatusInternalServerError)
		log.Println("Error encoding JSON:", err)
	}
}

// getPrices handles the /api/prices endpoint
func getPrices(w http.ResponseWriter, r *http.Request) {
	rows, err := db.Query("SELECT price FROM prices")
	if err != nil {
		http.Error(w, "Failed to query database", http.StatusInternalServerError)
		log.Println("Error querying database:", err)
		return
	}
	defer rows.Close()

	var prices []Price
	for rows.Next() {
		var price Price
		if err := rows.Scan(&price.Price); err != nil {
			http.Error(w, "Failed to read database result", http.StatusInternalServerError)
			log.Println("Error reading result:", err)
			return
		}
		prices = append(prices, price)
	}

	if err := rows.Err(); err != nil {
		http.Error(w, "Error occurred during iteration", http.StatusInternalServerError)
		log.Println("Row iteration error:", err)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	if err := json.NewEncoder(w).Encode(prices); err != nil {
		http.Error(w, "Failed to encode JSON", http.StatusInternalServerError)
		log.Println("Error encoding JSON:", err)
	}
}

func main() {

	///////////////////////////////////
	initDB()
	defer db.Close()

	http.HandleFunc("/api/pools", getPools)
	http.HandleFunc("/api/prices", getPrices)

	log.Println("Server started on :8080")
	log.Fatal(http.ListenAndServe(":8080", nil))

	//////////////////////////////////
	// Load the ABI for the pool contract
	poolABIPath := "trades.json"
	contractABI, err := loadABI(poolABIPath)
	if err != nil {
		log.Fatalf("Failed to load contract ABI: %v", err)
	}

	const priceABIPath = `[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"newPrice","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updateBlock","type":"uint256"}],"name":"PriceUpdated","type":"event"}]`

	// Parse the ABI for the price contract
	priceABI, err := abi.JSON(strings.NewReader(priceABIPath))
	if err != nil {
		log.Fatalf("Failed to parse ABI: %v", err)
	}


	// Connect to an Ethereum node
	client, err := ethclient.Dial("wss://eth-sepolia.g.alchemy.com/v2/k876etRLMsoIcTpTzkkTuh3LPBTK96YZ")
	if err != nil {
		log.Fatalf("Failed to connect to the Ethereum client: %v", err)
	}



	poolContractAddress := common.HexToAddress("0x57B5F08EE7Bf77b0118F3FB929B280A0E4FC3a19")
	oracleContractAddress := common.HexToAddress("0xcDC7cB917bE249A1ff5F623D5CF590eDA36236a7")

	// SQL Database setup (PostgreSQL example)
	db, err := sql.Open("postgres", "postgres://postgres:Encoded.001@localhost:5432/postgres?sslmode=disable")
	if err != nil {
		log.Fatalf("Failed to connect to the PostgreSQL database: %v", err)
	}
	defer db.Close()

	// Watch for PoolCreated and PriceUpdated events
	poolQuery := ethereum.FilterQuery{
		Addresses: []common.Address{poolContractAddress},
	}
	oracleQuery := ethereum.FilterQuery{
		Addresses: []common.Address{oracleContractAddress},
	}

	logs := make(chan types.Log)

	poolSubscription, err := client.SubscribeFilterLogs(context.Background(), poolQuery, logs)
	if err != nil {
		log.Fatalf("Failed to subscribe to pool event: %v", err)
	}

	oracleSubscription, err := client.SubscribeFilterLogs(context.Background(), oracleQuery, logs)
	if err != nil {
		log.Fatalf("Failed to subscribe to oracle event: %v", err)
	}

	fmt.Println("Listening for PoolCreated and Oracle events...")

	for {
		select {
		case err := <-poolSubscription.Err():
			log.Fatalf("Pool subscription error: %v", err)
		case err := <-oracleSubscription.Err():
			log.Fatalf("Oracle subscription error: %v", err)
		case vLog := <-logs:
			switch vLog.Address {
			case poolContractAddress:
				fmt.Printf("New Pool Created: %+v\n", vLog)

				var event PoolCreatedEvent
				err := contractABI.UnpackIntoInterface(&event, "PoolCreated", vLog.Data)
				if err != nil {
					log.Fatalf("Failed to unpack pool event data: %v", err)
				}

				poolId := new(big.Int).SetBytes(vLog.Topics[1].Bytes())

				startBlockInt := int64(0)
				if event.StartBlock != nil {
					startBlockInt = event.StartBlock.Int64()
				}
				endBlockInt := int64(0)
				if event.EndBlock != nil {
					endBlockInt = event.EndBlock.Int64()
				}
				leverageLongInt := int64(0)
				if event.LeverageLong != nil {
					leverageLongInt = event.LeverageLong.Int64()
				}
				leverageShortInt := int64(0)
				if event.LeverageShort != nil {
					leverageShortInt = event.LeverageShort.Int64()
				}

				_, err = db.Exec(
					"INSERT INTO pools (poolId, startBlock, endBlock, leverageLong, leverageShort) VALUES ($1, $2, $3, $4, $5)",
					poolId.Int64(), startBlockInt, endBlockInt, leverageLongInt, leverageShortInt,
				)
				if err != nil {
					log.Fatalf("Failed to save pool to SQL database: %v", err)
				}

			case oracleContractAddress:
				fmt.Printf("Price Updated: %+v\n", vLog)

				var event PriceUpdatedEvent
				err := priceABI.UnpackIntoInterface(&event, "PriceUpdated", vLog.Data)
				if err != nil {
					log.Fatalf("Failed to unpack price event data: %v", err)
				}
				fmt.Printf("Event Details: %+v\n", event)

				priceStr := event.NewPrice.String()

				_, err = db.Exec(
					"INSERT INTO prices (price) VALUES ($1)",
					priceStr,
				)
				if err != nil {
					log.Fatalf("Failed to save price to SQL database: %v", err)
				}
			}
		}
	}

}
